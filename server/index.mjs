import express from "express";
import http from "http";
import { Server } from "socket.io";
import path from "path";
import { fileURLToPath } from "url";
import GameRooms from "./rooms/GameRooms.js";
import { customAlphabet } from "nanoid";

// __dirname —Ç–æ—Ö–∏—Ä—É—É–ª–∞—Ö
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// ‚¨áÔ∏è Express app “Ø“Ø—Å–≥—ç—Ö
const app = express();
app.use(express.static(path.join(__dirname, "public")));

// ‚¨áÔ∏è HTTP server + Socket.IO
const server = http.createServer(app);
const io = new Server(server, {
  cors: {
    origin: "*",
  },
});

// ‚¨áÔ∏è Rooms —Ö–∞–¥–≥–∞–ª–∞—Ö
const rooms = {}; // { roomCode: GameRoom instance }

// ‚¨áÔ∏è Socket.IO –ª–æ–≥–∏–∫ (—Ç–∞–Ω–∞–π –æ–¥–æ–æ–≥–∏–π–Ω –ª–æ–≥–∏–∫ —ç–Ω—ç —Ö—ç—Å—ç–≥—Ç)
io.on("connection", (socket) => {
  // ... –±“Ø—Ö listener-—É—É–¥ —ç–Ω–¥ ...
});

// ‚¨áÔ∏è Server —ç—Ö–ª“Ø“Ø–ª—ç—Ö
const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
  console.log(`üöÄ Server listening on http://localhost:${PORT}`);
});

io.on("connection", (socket) => {
  console.log(`‚úÖ New client connected: ${socket.id}`);

  // üÜï ”®—Ä”©”© “Ø“Ø—Å–≥—ç—Ö “Ø–µ–¥
  socket.on("createRoom", () => {
    let roomCode;
    const nanoid = customAlphabet("1234567890", 6);
    do {
      roomCode = nanoid();
    } while (rooms[roomCode]);

    const room = new GameRooms(roomCode);
    room.addPlayer(socket.id);
    rooms[roomCode] = room;
    socket.join(roomCode);

    const color = room.getPlayerColor(socket.id); // ‚¨ÖÔ∏è ”®–Ω–≥”© –æ–Ω–æ–æ—Ö

    console.log(`üÜï Room created: ${roomCode}`);
    socket.emit("roomCreated", { roomCode, color }); // ‚¨ÖÔ∏è ”©–Ω–≥–∏–π–≥ –±—É—Ü–∞–∞—Ö
  });

  // üÜï JoinRoom “Ø–µ–¥
  socket.on("joinRoom", (roomCode) => {
    const room = rooms[roomCode];

    if (!room || room.players.length >= 2) {
      socket.emit("errorMessage", "”®—Ä”©”© –æ–ª–¥—Å–æ–Ω–≥“Ø–π —ç—Å–≤—ç–ª –¥“Ø“Ø—Ä—ç–Ω –±–∞–π–Ω–∞!");
      return;
    }

    const added = room.addPlayer(socket.id);
    if (!added) {
      socket.emit("errorMessage", "”®—Ä”©”© –¥“Ø“Ø—Ä—Å—ç–Ω –±–∞–π–Ω–∞!");
      return;
    }

    socket.join(roomCode);

    console.log(`üë• Player joined room: ${roomCode}`);

    if (room.players.length === 2) {
      const result = {
        pieces: room.gameLogic.pieces,
        currentTurn: room.gameLogic.currentTurn,
        movablePieces: room.gameLogic.movablePieces,
      };
      room.players.forEach((playerId) => {
        const color = room.getPlayerColor(playerId); // ‚¨ÖÔ∏è ”©–Ω–≥”©
        io.to(playerId).emit("roomJoined", {
          roomCode,
          color,
          pieces: result.pieces,
          currentTurn: result.currentTurn,
          movablePieces: result.movablePieces,
        });
      });
    }
  });

  // –¢–æ–≥–ª–æ–≥—á ”©—Ä”©”©–Ω–¥ –æ—Ä–æ–æ–¥ —Å—ç—Ä–≤—ç—Ä—Ç—ç–π —Ö–æ–ª–±–æ–≥–¥–æ–∂ –±–∞–π–≥–∞–∞ –±–æ–ª updateEvent –¥—É—É–¥–Ω–∞
  socket.on("requestBoardState", (roomCode) => {
    const room = rooms[roomCode];
    if (!room) return;
    const result = {
      pieces: room.gameLogic.pieces,
      currentTurn: room.currentTurn,
      movablePieces: room.gameLogic.currentMovablePieces,
    };
    socket.emit("updateBoard", result);
  });
  // –•“Ø“Ø —Å–æ–Ω–≥–æ—Ö–æ–¥ —Å–µ—Ä–≤–µ—Ä—Ç —Ö–∞–Ω–¥–∞–∂ highlight —Ö–∏–π—Ö
  socket.on("selectedPiece", ({ roomCode, pieceId }) => {
    const room = rooms[roomCode];
    if (!room) return;

    const color = room.getPlayerColor(socket.id);
    const piece = room.gameLogic.pieces.find((p) => p.id === pieceId);

    if (!piece) {
      socket.emit("errorMessage", "–•“Ø“Ø –æ–ª–¥—Å–æ–Ω–≥“Ø–π!");
      return;
    }
    if (piece.color !== color) {
      socket.emit("errorMessage", "–≠–Ω—ç —Ö“Ø“Ø —Ç–∞–Ω—ã—Ö –±–∏—à!");
      return;
    }

    const moves = room.gameLogic.getValidMoves(piece); // ‚û°Ô∏è valid moves –∞–≤–∞—Ö
    socket.emit("highlightMoves", { piece, moves }); // ‚û°Ô∏è –∑”©–≤—Ö”©–Ω —Ç—É—Ö–∞–π–Ω —Ç–æ–≥–ª–æ–≥—á —Ä—É—É –±—É—Ü–∞–∞—Ö
  });
  // –¢–æ–≥–ª–æ–≥—á–∏–π–Ω –Ω“Ø“Ø–¥—ç–ª –∏—Ä—ç—Ö—ç–¥ –∞—Ö–∏—Ö
  socket.on("playerMove", ({ roomCode, piece, move }) => {
    const room = rooms[roomCode];

    if (!room) {
      socket.emit("errorMessage", "”®—Ä”©”© –æ–ª–¥—Å–æ–Ω–≥“Ø–π!");
      return;
    }

    const result = room.handleMove(socket.id, piece, move);
    const socketIds = room.players;
    for (const id of socketIds) {
      if (result?.error) {
        socket.emit("errorMessage", result.error);
      } else if (result) {
        // ”®—Ä”©”©–Ω–¥ –±–∞–π–≥–∞–∞ –ë“Æ–• —Ç–æ–≥–ª–æ–≥—á–¥–æ–¥ —à–∏–Ω—ç—á–ª—ç–ª –∏–ª–≥—ç—ç—Ö
        io.to(id).emit("updateBoard", {
          pieces: result.pieces,
          currentTurn: result.currentTurn,
          movablePieces: room.gameLogic.currentMovablePieces, // ‚ú® –Ω—ç–º—ç–ª—Ç
        });
      }
    }
  });

  // –¢–æ–≥–ª–æ–≥—á ”©—Ä”©”©–Ω”©”©—Å –≥–∞—Ä–∞—Ö
  socket.on("leaveRoom", (roomCode) => {
    const room = rooms[roomCode];
    if (!room) return;

    room.removePlayer(socket.id);
    socket.leave(roomCode);

    if (room.players.length === 0) {
      delete rooms[roomCode];
      console.log(`‚ùå Room deleted: ${roomCode}`);
    } else {
      io.to(roomCode).emit("opponentLeft");
    }
  });

  // –°–∞–ª—Å–∞–Ω —Ç–æ—Ö–∏–æ–ª–¥–æ–ª: —Ç–æ–≥–ª–æ–≥—á disconnect —Ö–∏–π—Ö
  socket.on("disconnect", () => {
    for (const [roomCode, room] of Object.entries(rooms)) {
      const idx = room.players.indexOf(socket.id);
      if (idx !== -1) {
        // –¢–æ–≥–ª–æ–≥—á–∏–π–≥ –º–∞—Å—Å–∏–≤–Ω–∞–∞—Å —Ö–∞—Å–∞—Ö
        room.players.splice(idx, 1);

        if (room.players.length === 0) {
          delete rooms[roomCode];
          console.log(`‚ùå Room deleted: ${roomCode}`);
        } else {
          io.to(roomCode).emit("opponentLeft");
        }
        break;
      }
    }
    console.log(`üîå Client disconnected: ${socket.id}`);
  });

  // –Ø–ª–∞–≥—á —Ç–æ–¥—Ä–æ—Ö–æ–¥
  socket.on("gameOver", ({ roomCode, winner }) => {
    console.log("–Ø–ª–∞–≥—á–∏–π–≥ —Ö“Ø–ª—ç—ç–∂ –∞–≤–∞–≤", winner);
    io.to(roomCode).emit("gameEnded", { winner });
  });
});
