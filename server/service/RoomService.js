// server/service/RoomService.js
import {
  createRoom as createRoomInstance,
  getRoomByCode,
  deleteRoom,
  getAllRooms,
  getRoomByPlayer,
} from '../game/RoomManager.js';

const RoomService = {
  createRoom(socket, io) {
    const { room, roomCode } = createRoomInstance(socket, io);
    const color = room.getPlayerColor(socket.id);
    socket.emit('roomCreated', { roomCode, color });
    console.log(`üÜï Room created: ${roomCode}`);
  },

  joinRoom(socket, io, roomCode) {
    const room = getRoomByCode(roomCode);
    if (!room || room.players.length >= 2) {
      socket.emit('errorMessage', '”®—Ä”©”© –æ–ª–¥—Å–æ–Ω–≥“Ø–π —ç—Å–≤—ç–ª –¥“Ø“Ø—Ä—ç–Ω –±–∞–π–Ω–∞!');
      return;
    }

    const added = room.addPlayer(socket.id);
    if (!added) {
      socket.emit('errorMessage', '”®—Ä”©”© –¥“Ø“Ø—Ä—Å—ç–Ω –±–∞–π–Ω–∞!');
      return;
    }

    socket.join(roomCode);
    socket.roomCode = roomCode;
    console.log(`üë• Player joined room: ${roomCode}`);

    if (room.players.length === 2) {
      const result = {
        pieces: room.gameLogic.pieces,
        currentTurn: room.gameLogic.currentTurn,
        movablePieces: room.gameLogic.movablePieces,
      };

      room.players.forEach((playerId) => {
        const color = room.getPlayerColor(playerId);
        io.to(playerId).emit('roomJoined', {
          roomCode,
          color,
          ...result,
        });
      });
    }
  },

  leaveRoom(socket, io, roomCode) {
    const room = getRoomByCode(roomCode);
    if (!room) return;

    room.removePlayer(socket.id);
    socket.leave(roomCode);

    if (room.players.length === 0) {
      deleteRoom(roomCode);
      console.log(`‚ùå Room deleted: ${roomCode}`);
    } else {
      io.to(roomCode).emit('opponentLeft');
    }
  },

  handleDisconnect(socket, io) {
    const room = getRoomByPlayer(socket.id, socket.roomCode);
    if (!room) return;

    // üî∏ Disconnect –±–æ–ª—Å–æ–Ω —Ç–æ–≥–ª–æ–≥—á–∏–π–≥ —Ç—ç–º–¥—ç–≥–ª—ç
    room.removePlayer(socket.id);

    // üî∏ –°—ç—Ä–≥—ç—ç—Ö—ç–¥ –∑–æ—Ä–∏—É–ª–∂ —Ç–æ–≥–ª–æ–æ–º—ã–Ω —Ç”©–ª”©–≤ —Ö–∞–¥–≥–∞–ª–∞—Ö (—Ö—ç—Ä–≤—ç—ç —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π –±–æ–ª)
    const saveData = room.getSaveData();
    // –¢–∞ —Ö“Ø—Å–≤—ç–ª —ç–Ω—ç saveData-–≥ —Ñ–∞–π–ª —ç—Å–≤—ç–ª DB-–¥ —Ö–∞–¥–≥–∞–ª–∞—Ö –±–æ–ª–æ–º–∂—Ç–æ–π

    // üî∏ –ù”©–≥”©”© —Ç–æ–≥–ª–æ–≥—á–∏–¥ –º—ç–¥—ç–≥–¥—ç–ª –∏–ª–≥—ç—ç—Ö
    for (const playerId of room.players) {
      io.to(playerId).emit('playerDisconnected', {
        playerId: socket.id,
        message: '–¢–æ–≥–ª–æ–≥—á —Ç–æ–≥–ª–æ–æ–º–æ–æ—Å –≥–∞—Ä—Å–∞–Ω –±–∞–π–Ω–∞.',
      });
    }

    // üî∏ –•—ç—Ä–≤—ç—ç ”©—Ä”©”©–Ω–¥ –æ–≥—Ç —Ö“Ø–Ω “Ø–ª–¥—ç—ç–≥“Ø–π –±–æ–ª —É—Å—Ç–≥–∞—Ö
    if (room.players.length === 0) {
      deleteRoom(room.roomCode);
      console.log(`[Room ${room.roomCode}] –•–æ–æ—Å–æ—Ä—Å–æ–Ω —Ç—É–ª —É—Å—Ç–ª–∞–∞.`);
    }
  },
};

export default RoomService;
