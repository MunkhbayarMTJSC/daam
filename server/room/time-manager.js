export default class TimerManager {
  constructor(room, options = {}) {
    this.room = room;

    this.playerTimes = {
      0: options.playerTimeMs || 60 * 60 * 1000, // 30 –º–∏–Ω
      1: options.playerTimeMs || 60 * 60 * 1000,
    };

    this.inactiveTimeoutMs = options.inactiveTimeoutMs || 5 * 60 * 1000;

    this.activeColor = null; // –∞–ª—å —Ç–æ–≥–ª–æ–≥—á–∏–π–Ω —Ü–∞–≥ —è–≤–∂ –±–∞–π–≥–∞–∞ –≤—ç
    this.lastMoveAt = null; // —Å“Ø“Ø–ª–∏–π–Ω –Ω“Ø“Ø–¥–ª–∏–π–Ω timestamp
    this.playerTimer = null; // —Ç–æ–≥–ª–æ–≥—á–∏–π–Ω —Ü–∞–≥ (setTimeout)
    this.inactiveTimer = null; // 5 –º–∏–Ω inactivity timer
  }

  /** –ù—ç–≥ —Ç–æ–≥–ª–æ–≥—á–∏–π–Ω —Ü–∞–≥–∏–π–≥ —ç—Ö–ª“Ø“Ø–ª—ç—Ö */
  startPlayerClock(color) {
    this.clearAllTimers();

    this.activeColor = color;
    this.lastMoveAt = Date.now();

    // ‚è± Inactivity timer
    this.inactiveTimer = setTimeout(() => {
      this.handleInactiveTimeout(color);
    }, this.inactiveTimeoutMs);

    // üïê Player total time countdown
    this.playerTimer = setTimeout(() => {
      this.handlePlayerTimeout(color);
    }, this.playerTimes[color]);
  }

  /** –ù“Ø“Ø—Å–Ω–∏–π –¥–∞—Ä–∞–∞ —Ö—É–≥–∞—Ü–∞–∞ —Ö–∞—Å–∞—Ö */
  updateTimeAfterMove(prevColor) {
    const now = Date.now();
    const elapsed = now - this.lastMoveAt;
    this.playerTimes[prevColor] -= elapsed;

    if (this.playerTimes[prevColor] <= 0) {
      this.handlePlayerTimeout(prevColor);
    }
  }

  /** 5 –º–∏–Ω –Ω“Ø“Ø–≥—ç—ç–≥“Ø–π “Ø–µ–¥ –¥—É—É—Å–≥–∞—Ö */
  handleInactiveTimeout(color) {
    const loser = this.room.pm.getPlayerByColor(color);
    const socket = this.room.pm.getSocketByPlayer(loser);
    const winner = 1 - color;

    if (socket) {
      socket.emit('turnTimeout', '‚è∞ –¢–∞ 5 –º–∏–Ω –Ω“Ø“Ø—Ö–≥“Ø–π –±–∞–π—Å–Ω–∞–∞—Ä —è–ª–∞–≥–¥–ª–∞–∞.');
    }

    this.room.endGame(winner);
  }

  /** –¢–æ–≥–ª–æ–≥—á–∏–π–Ω –Ω–∏–π—Ç —Ü–∞–≥ –¥—É—É—Å—Å–∞–Ω “Ø–µ–¥ */
  handlePlayerTimeout(color) {
    const winner = 1 - color;
    this.room.endGame(winner);
  }

  clearAllTimers() {
    if (this.playerTimer) clearTimeout(this.playerTimer);
    if (this.inactiveTimer) clearTimeout(this.inactiveTimer);
    this.playerTimer = null;
    this.inactiveTimer = null;
  }

  /** –¢–æ–≥–ª–æ–æ–º –¥—É—É—Å–∞—Ö–∞–¥ */
  clearAll() {
    this.clearAllTimers();
  }
}
